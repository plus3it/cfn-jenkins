{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRoleProfile" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "" ] }
      ]
    },
    "ExecuteAppScript": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "JenkinsAppinstallScriptUrl" }, "" ] }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoUpdates" }, "true" ] }
      ]
    },
    "NotGenFive": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "c5"
              ]
            },
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "m5"
              ]
            }
          ]
        }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseAdminGroups": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminGroups" }, "" ] }
      ]
    },
    "UseAdminUsers": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminUsers" }, "" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] }
      ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseKeyPair": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "KeyPairName" }, "" ] }
      ]
    },
    "UseOuPath": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerOuPath" }, "" ] }
      ]
    },
    "UseS3Source": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerS3Source" }, "false" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template creates an Autoscaling Group and Launch Configuration to deploy a STIG-hardened EL7 Linux instance to host the Jenkins master-node service/application.",
  "Mappings": {
    "InstanceTypeCapabilities": {
      "IsGenFive": {
        "ExternDeviceName": "/dev/xvdf",
        "InternDeviceName": "/dev/nvme1n1"
      },
      "PreGenFive": {
        "ExternDeviceName": "/dev/xvdf",
        "InternDeviceName": "/dev/xvdf"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "ServerHostname",
            "DnsSuffix",
            "AmiId",
            "InstanceType",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "SubnetIds",
            "NoPublicIp",
            "NoReboot",
            "NoUpdates",
            "InstanceRoleName",
            "InstanceRoleProfile",
            "SecurityGroupIds"
          ]
        },
        {
          "Label": {
            "default": "EC2 Watchmaker Configuration"
          },
          "Parameters": [
            "EpelRepo",
            "PipRpm",
            "PyStache",
            "PipIndexFips",
            "WatchmakerConfig",
            "WatchmakerEnvironment",
            "WatchmakerOuPath",
            "WatchmakerAdminGroups",
            "WatchmakerAdminUsers",
            "WatchmakerS3Source"
          ]
        },
        {
          "Label": {
            "default": "Jenkins Application Configuration"
          },
          "Parameters": [
            "JenkinsOsPrepScriptUrl",
            "JenkinsRpmName",
            "JenkinsRepoURL",
            "JenkinsRepoKeyURL",
            "JenkinsAppinstallScriptUrl",
            "BackupBucket",
            "BackupFolder"
          ]
        },
        {
          "Label": {
            "default": "EC2 Application EBS Volume"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "AutoScale Configuration"
          },
          "Parameters": [
            "DesiredCapacity",
            "MinCapacity",
            "MaxCapacity"
          ]
        },
        {
          "Label": {
            "default": "CloudFormation Configuration"
          },
          "Parameters": [
            "CfnEndpointUrl",
            "CfnGetPipUrl",
            "CfnBootstrapUtilsUrl",
            "ToggleCfnInitUpdate",
            "ToggleNewInstances"
          ]
        }
      ],
      "ParameterLabels": {
        "ToggleCfnInitUpdate": {
          "default": "Force Cfn Init Update"
        },
        "ToggleNewInstances": {
          "default": "Force New Instances"
        }
      }
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL the file containing the admin users' SSH public keys.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Whether to mount an extra EBS volume. Leave as default (\"false\") to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/var/lib/jenkins",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is set to \"false\"",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "1",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AsgLoadBalancer": {
      "Description": "Attachable-ID of ELB to attach scaling-group to.",
      "Type": "String"
    },
    "BackupBucket": {
      "AllowedPattern": "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]*$|^$",
      "Description": "S3 Bucket to host backups of Jenkins config-data",
      "Type": "String"
    },
    "BackupFolder": {
      "AllowedPattern": "^[a-zA-Z]*[a-z0-9-]*[a-zA-Z]*$",
      "Description": "Folder in S3 Bucket to host backups of Jenkins config-data",
      "Type": "String"
    },
    "CfnBootstrapUtilsUrl": {
      "AllowedPattern": "^$|^http[s]?://.*\\.tar\\.gz$",
      "Default": "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
      "Description": "URL to aws-cfn-bootstrap-latest.tar.gz",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com",
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "CfnGetPipUrl": {
      "AllowedPattern": "^$|^http[s]?://.*\\.py$",
      "Default": "https://bootstrap.pypa.io/get-pip.py",
      "Description": "URL to get-pip.py",
      "Type": "String"
    },
    "DesiredCapacity": {
      "Default": "1",
      "Description": "Desired number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "DnsSuffix": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Jenkins' hostname and DNS record",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "InstanceRoleName": {
      "Default": "",
      "Description": "(Optional) IAM instance-role name used by cfn-init to authenticate to the CloudFormation endpoint.",
      "Type": "String"
    },
    "InstanceRoleProfile": {
      "Default": "",
      "Description": "(Optional) IAM instance-role profile to apply to the instance(s)",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "m5.large",
        "m5.xlarge",
        "c5.large",
        "c5.xlarge",
        "m4.large",
        "m4.xlarge",
        "c4.large",
        "c4.xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "JenkinsAppinstallScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of Jenkins application-installer script.",
      "Type": "String"
    },
    "JenkinsOsPrepScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of OS-preparation script.",
      "Type": "String"
    },
    "JenkinsRepoKeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pkg.jenkins.io/redhat-stable/jenkins.io.key",
      "Description": "URL to the Jenkins yum-repository GPG key",
      "Type": "String"
    },
    "JenkinsRepoURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "http://pkg.jenkins.io/redhat-stable",
      "Description": "URL to the Jenkins yum-repository",
      "Type": "String"
    },
    "JenkinsRpmName": {
      "Description": "Name of Jenkins RPM to install. Include release version if 'other-than-latest' is desired. Example values would be: jenkins, jenkins-2.*, jenkins-X.Y.Z, etc.",
      "Type": "String",
      "AllowedPattern": "^jenkins.*$"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "String"
    },
    "MaxCapacity": {
      "Default": "2",
      "Description": "Maximum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "MinCapacity": {
      "Default": "1",
      "Description": "Minimum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pypi.org/simple/",
      "Description": "URL of pip index  that is compatible with FIPS 140-2 requirements.",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "autojenk",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "ServerHostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Default": "jenkins-master",
      "Description": "Suffix for Jenkins' hostname and DNS record",
      "Type": "String"
    },
    "SubnetIds": {
      "Description": "List of subnets to associate to the Autoscaling Group",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "ToggleCfnInitUpdate": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance metadata, triggering the cfn-init update sequence",
      "Type": "String"
    },
    "ToggleNewInstances": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance userdata, triggering new instances via the Autoscale update policy",
      "Type": "String"
    },
    "WatchmakerAdminGroups": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain groups that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerAdminUsers": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain users that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    },
    "WatchmakerOuPath": {
      "AllowedPattern": "^$|^(OU=.+,)+(DC=.+)+$",
      "Default": "",
      "Description": "(Optional) DN of the OU to place the instance when joining a domain. If blank and \"WatchmakerEnvironment\" enforces a domain join, the instance will be placed in a default container. Leave blank if not joining a domain, or if \"WatchmakerEnvironment\" is \"false\"",
      "Type": "String"
    },
    "WatchmakerS3Source": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Flag that tells watchmaker to use its instance role to retrieve watchmaker content from S3",
      "Type": "String"
    }
  },
  "Resources": {
    "JenkinsMasterASG": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "DesiredCapacity" },
          "Timeout": "PT60M"
        }
      },
      "Properties": {
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "LaunchConfigurationName": { "Ref": "JenkinsMasterLC" },
        "LoadBalancerNames": [ { "Ref": "AsgLoadBalancer" } ],
        "MaxSize": { "Ref": "MaxCapacity" },
        "MinSize": { "Ref": "MinCapacity" },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "VPCZoneIdentifier": { "Ref": "SubnetIds" }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "2",
          "MinInstancesInService": "1",
          "PauseTime": "PT60M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "JenkinsMasterLC": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "commands": {
              "10-admkey-install": {
                "command": "bash -xe /etc/cfn/scripts/admkey.sh"
              }
            },
            "files": {
              "/etc/cfn/files/adminkeys.pub": {
                "group": "root",
                "mode": "000600",
                "owner": "root",
                "source": { "Ref": "AdminPubkeyURL" }
              },
              "/etc/cfn/scripts/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /etc/cfn/files/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "app-install": {
            "files": {
              "/etc/cfn/scripts/appinstall.sh": {
                "source": { "Ref": "JenkinsAppinstallScriptUrl" },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-appinstall-script": {
                "command": "bash -xe /etc/cfn/scripts/appinstall.sh"
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              "admkey-install",
              "watchmaker-install",
              "watchmaker-launch",
              "osprep",
              {
                "Fn::If": [
                  "ExecuteAppScript",
                  [
                    "app-install",
                    "cron-setup"
                  ],
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ],
            "update": [
              "setup",
              {
                "Fn::If": [
                  "InstallUpdates",
                  "install-updates",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "watchmaker-install",
              "watchmaker-update",
              "osprep",
              {
                "Fn::If": [
                  "ExecuteAppScript",
                  [
                    "app-install",
                    "cron-setup"
                  ],
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ]
          },
          "cron-setup": {
            "files": {
              "/etc/cron.d/jenkins-backups": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "# Daily backup of JENKINS_HOME to S3\n",
                      "0 23 * * * jenkins /usr/bin/aws ",
                      "s3 sync --delete --quiet /var/lib/jenkins s3://",
                      { "Ref": "BackupBucket" },
                      "/Backups/daily/$(date '+\\%A')/\n",
                      "# Sync JENKINS_HOME to S3 for re-deployments\n",
                      "*/20 * * * *  jenkins /usr/bin/aws ",
                      "s3 sync --delete --quiet /var/lib/jenkins s3://",
                      { "Ref": "BackupBucket" },
                      "/Backups/sync/JENKINS_HOME/\n"
                    ]
                  ]
                },
                "group"   : "root",
                "mode"    : "000400",
                "owner"   : "root"
              }
            }
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsMasterASG",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "install-updates": {
            "commands": {
              "10-install-updates": {
                "command": "yum -y update"
              }
            }
          },
          "osprep": {
            "files": {
              "/etc/cfn/scripts/osprep.sh": {
                "source": { "Ref": "JenkinsOsPrepScriptUrl" },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-osprep-script": {
                "command": "bash -xe /etc/cfn/scripts/osprep.sh"
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "shutdown -r +1 &"
              }
            }
          },
          "setup": {
            "files": {
              "/etc/cfn/Jenkins.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "JENKINS_HOME_PATH=",
                      { "Ref": "AppVolumeMountPath" },
                      "\n",
                      "JENKINS_BACKUP_BUCKET=",
                      { "Ref": "BackupBucket" },
                      "\n",
                      "JENKINS_BACKUP_FOLDER=",
                      { "Ref": "BackupFolder" },
                      "\n",
                      "JENKINS_APPINSTALL_SCRIPT=",
                      { "Ref": "JenkinsAppinstallScriptUrl" },
                      "\n",
                      "JENKINS_OSPREP_SCRIPT=",
                      { "Ref": "JenkinsOsPrepScriptUrl" },
                      "\n",
                      "JENKINS_CFN_ENDPOINT=",
                      { "Ref": "CfnEndpointUrl" },
                      "\n",
                      "JENKINS_YUM_URL=",
                      { "Ref": "JenkinsRepoURL" },
                      "\n",
                      "JENKINS_YUM_REPOKEY=",
                      { "Ref": "JenkinsRepoKeyURL" },
                      "\n",
                      "JENKINS_EPEL_REPO=",
                      { "Ref": "EpelRepo" },
                      "\n",
                      "JENKINS_RPM_NAME=",
                      { "Ref": "JenkinsRpmName" },
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceRoleName" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.JenkinsMasterLC.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsMasterLC",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PipIndexFips" },
                      "\n",
                      "pip install --index-url=\"$PYPI_URL\" wheel==0.29.0\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade pip setuptools boto3 watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/yum.repos.d/jenkins.repo": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[jenkins]\n",
                      "gpgkey = ",
                      { "Ref": "JenkinsRepoKeyURL" },
                      "\n",
                      "enabled = 1\n",
                      "baseurl = ",
                      { "Ref": "JenkinsRepoURL" },
                      "\n",
                      "name = Jenkins CI service-repository\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000444",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh",
                "env": {
                  "AWS_CA_BUNDLE": "/etc/pki/tls/certs/ca-bundle.crt",
                  "AWS_DEFAULT_REGION": { "Ref": "AWS::Region" },
                  "REQUESTS_CA_BUNDLE": "/etc/pki/tls/certs/ca-bundle.crt"
                }
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --no-reboot",
                      " --exclude-states scap*scan",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \"",
                                { "Ref": "WatchmakerOuPath" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseS3Source",
                          " --s3-source",
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "watchmaker-update": {
            "commands": {
              "10-watchmaker-update": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --salt-states None",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \"",
                                { "Ref": "WatchmakerOuPath" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseS3Source",
                          " --s3-source",
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "ToggleCfnInitUpdate": { "Ref": "ToggleCfnInitUpdate" }
      },
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "AssignPublicIp",
            "true",
            "false"
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": {
                  "Fn::If": [
                    "NotGenFive",
                    {
                      "Fn::FindInMap": [
                         "InstanceTypeCapabilities",
                         "PreGenFive",
                         "ExternDeviceName"
                      ]
                    },
                    {
                      "Fn::FindInMap": [
                        "InstanceTypeCapabilities",
                        "IsGenFive",
                        "ExternDeviceName"
                      ]
                    }
                  ]
                },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRoleProfile" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": {
          "Fn::If": [
            "UseKeyPair",
            { "Ref": "KeyPairName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "SecurityGroups": { "Ref": "SecurityGroupIds" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"===============3585321300151562773==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud.cfg\"\n",
                "\n",
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "users:\n",
                "  - default\n",
                "\n",
                "hostname: ",
                { "Ref": "ServerHostname" },
                "\n",
                "fqdn: ",
                { "Ref": "ServerHostname" },
                ".",
                { "Ref": "DnsSuffix" },
                "\n",
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "- cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          {
                            "Fn::If": [
                              "NotGenFive",
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "PreGenFive",
                                  "InternDeviceName"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "IsGenFive",
                                  "InternDeviceName"
                                ]
                              }
                            ]
                          },
                          "\n",
                          "\n",
                          "mounts:\n",
                          "- [ ",
                          {
                            "Fn::If": [
                              "NotGenFive",
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "PreGenFive",
                                  "InternDeviceName"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "IsGenFive",
                                  "InternDeviceName"
                                ]
                              }
                            ]
                          },
                          ", ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"script.sh\"\n",
                "\n",
                "#!/bin/bash -xe\n\n",
                "# CFN LaunchConfig Update Toggle: ",
                { "Ref": "ToggleNewInstances" },
                "\n\n",
                "# Export cert bundle ENVs\n",
                "export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "\n",
                "# Define our error-handler\n",
                "function err_exit {\n",
                "   echo \"${1}\"\n",
                "   logger -p kern.crit -t UserData \"${1}\"\n",
                "   /opt/aws/bin/cfn-signal -e 1 --stack ",
                    { "Ref": "AWS::StackName" },
                    " --resource JenkinsMasterLC\n",
                "   exit 1\n",
                "}\n",
                "\n",
                "# Install RPMs needed by the cfn-tools.\n",
                "yum --enablerepo=",
                 { "Ref": "EpelRepo" },
                 " install -y ",
                 { "Ref": "PyStache" },
                 " ",
                 { "Ref": "PipRpm" },
                 " || err_exit 'Could not install Cfn dependencies.'\n",
                "\n",
                "# Update cfn-bootstrapper hash method\n",
                "PYVERS=$(python -c 'import sys;",
                 " version=sys.version_info[:2];",
                 " print(\"{0}.{1}\".format(*version))')\n",
                "sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                 " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                 "/util.py\n",
                "\n",
                "# Upgrade pip and setuptools\n",
                "PYPI_URL=",
                { "Ref": "PipIndexFips" },
                "\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade pip setuptools\n\n",
                "# Fixup cfn utils\n",
                "INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat ",
                "2> /dev/null || echo /usr/init/redhat)\n",
                "chmod 775 ${INITDIR}/cfn-hup\n",
                "ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                "chkconfig --add cfn-hup\n",
                "chkconfig cfn-hup on\n",
                "mkdir -p /opt/aws/bin\n",
                "BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin ",
                "2> /dev/null || echo /usr/bin)\n",
                "for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup ",
                "cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                "do\n",
                "  ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                "  echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                "done\n\n",

                "# Add cfn-signal to path\n",
                "hash cfn-signal 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                "\n\n",
                "# Execute cfn-init\n",
                "/opt/aws/bin/cfn-init -v -c launch",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource JenkinsMasterLC",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRoleName" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                " ||",
                " ( echo 'ERROR: cfn-init failed! Aborting!';",
                " /opt/aws/bin/cfn-signal -e 1",
                "  --stack ",
                { "Ref": "AWS::StackName" },
                "  --resource JenkinsMasterASG",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRoleName" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "  --region ",
                { "Ref": "AWS::Region" },
                ";",
                " exit 1",
                " )\n\n",
                "--===============3585321300151562773==--"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }
  }
}
