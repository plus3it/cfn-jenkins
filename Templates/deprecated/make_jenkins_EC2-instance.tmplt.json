{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRole" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "" ] }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoUpdates" }, "true" ] }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseCfnAppInstaller": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "JenkinsAppinstallScriptUrl" }, "" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] }
      ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template deploys a standalone Linux instance to host a Jenkins master node.",
  "Mappings": {
    "Distro2RootDevice": {
      "AmazonLinux": { "DeviceName": "xvda" },
      "CentOS": { "DeviceName": "sda1" },
      "RedHat": { "DeviceName": "sda1" }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "AmiDistro",
            "InstanceType",
            "InstanceRole",
            "ProvisionUser",
            "KeyPairName",
            "NoReboot",
            "NoUpdates",
            "SecurityGroupIds"
          ]
        },
        {
          "Label": {
            "default": "EC2 Application EBS Volume"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "NoPublicIp",
            "ServerHostname",
            "DnsSuffix",
            "SubnetIds"
          ]
        },
        {
          "Label": {
            "default": "S3 Resources"
          },
          "Parameters": [
            "BackupBucket",
            "BackupCronURL",
            "BackupFolder"
          ]
        },
        {
          "Label": {
            "default": "Miscellaneous Parameters"
          },
          "Parameters": [
            "AdminPubkeyURL",
            "EpelRepo",
            "PipIndexFips",
            "PipRpm",
            "PyStache"
          ]
        },
        {
          "Label": {
            "default": "CloudFormation Configuration"
          },
          "Parameters": [
            "CfnEndpointUrl"
          ]
        }
      ],
      "ParameterLabels": {
        "ForceNewInstancesToggle": {
          "default": "Force New Instances"
        }
      }
    }
  },
  "Outputs": {
    "JenkinsInstanceId": {
      "Description": "Instance ID",
      "Export": {
        "Name": { "Fn::Sub": "${AWS::StackName}-InstanceId" }
      },
      "Value": { "Ref": "JenkinsMaster" }
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL the file containing the admin users' SSH public keys.",
      "Type": "String"
    },
    "AmiDistro": {
      "AllowedValues": [
        "CentOS",
        "RedHat"
      ],
      "Default": "CentOS",
      "Description": "Linux distro of the AMI",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ],
      "Default": "",
      "Description": "Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/var/lib/jenkins",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "1",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "BackupBucket": {
      "AllowedPattern": "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]*$|^$",
      "Description": "S3 Bucket to host backups of Jenkins config-data",
      "Type": "String"
    },
    "BackupCronURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the Jenkins backup cron-file",
      "Type": "String"
    },
    "BackupFolder": {
      "AllowedPattern": "^[a-zA-Z]*[a-z0-9-]*[a-zA-Z]*$",
      "Description": "Folder in S3 Bucket to host backups of Jenkins config-data",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "",
      "Description": "URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "DnsSuffix": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Jenkins' hostname and DNS record",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "InstanceRole": {
      "Default": "",
      "Description": "IAM instance role to apply to the instance(s)",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "c4.large",
        "c4.xlarge",
        "m3.xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "r3.2xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "JenkinsAppinstallScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of Jenkins application-installer script.",
      "Type": "String"
    },
    "JenkinsOsPrepScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of OS-preparation script.",
      "Type": "String"
    },
    "JenkinsRepoKeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pkg.jenkins.io/redhat-stable/jenkins.io.key",
      "Description": "URL to the Jenkins yum-repository GPG key",
      "Type": "String"
    },
    "JenkinsRepoURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "http://pkg.jenkins.io/redhat-stable",
      "Description": "URL to the Jenkins yum-repository",
      "Type": "String"
    },
    "JenkinsRpmName": {
      "Description": "Name of Jenkins RPM to install. Include release version if 'other-than-latest' is desired. Example values would be: jenkins, jenkins-2.*, jenkins-X.Y.Z, etc.",
      "Type": "String",
      "AllowedPattern": "^jenkins.*$"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, SystemPrep _always_ installs updates)",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pypi.org/simple/",
      "Description": "URL of pip index that is compatible with FIPS 140-2 requirements.",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "autojenk",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "ServerHostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Default": "jenkins-master",
      "Description": "Suffix for Jenkins' hostname and DNS record",
      "Type": "String"
    },
    "SubnetIds": {
      "Description": "Subnet to associate to the Instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    }
  },
  "Resources": {
    "JenkinsMaster": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT60M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "commands": {
              "10-admkey-install": {
                "command": "bash -xe /tmp/admkey.sh"
              }
            },
            "files": {
              "/tmp/adminkeys.pub": {
                "group": "root",
                "mode": "000600",
                "owner": "root",
                "source": { "Ref": "AdminPubkeyURL" }
              },
              "/tmp/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /tmp/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "app-install": {
            "files": {
              "/etc/cfn/scripts/appinstall.sh": {
                "source": { "Ref": "JenkinsAppinstallScriptUrl" },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/tmp/root.cron": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "# Daily backup of JENKINS_HOME to S3\n",
                      "0 23 * * * sudo -H -u jenkins /usr/bin/aws s3 ",
                      "sync --delete --quiet /var/lib/jenkins s3://",
                      { "Ref": "BackupBucket" },
                      "/Backups/daily/$(date '+\\%A')/\n",
                      "# Sync JENKINS_HOME to S3 for re-deployments\n",
                      "*/20 * * * * sudo -H -u jenkins /usr/bin/aws s3 ",
                      "sync --delete --quiet /var/lib/jenkins s3://",
                      { "Ref": "BackupBucket" },
                      "/Backups/sync/JENKINS_HOME/\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-appinstall-script": {
                "command": "bash -xe /etc/cfn/scripts/appinstall.sh"
              },
              "2-append-root_cron": {
                "command": "cat /tmp/root.cron >> /var/spool/cron/root"
              },
              "3-restart-cron": {
                "command": "systemctl restart crond"
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              "admkey-install",
              "watchmaker-install",
              "osprep",
              "watchmaker-launch",
              {
                "Fn::If": [
                  "UseCfnAppInstaller",
                  "app-install",
                  { "Ref" : "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ]
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsMaster",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "install-updates": {
            "commands": {
              "10-install-updates": {
                "command": "yum update -y"
              }
            }
          },
          "misc-rpms": {
            "commands": {
              "yum-packages": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "yum --enablerepo=epel install -y",
                      "git",
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "osprep": {
            "files": {
              "/etc/cfn/scripts/osprep.sh": {
                "source": { "Ref": "JenkinsOsPrepScriptUrl" },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-osprep-script": {
                "command": "bash -xe /etc/cfn/scripts/osprep.sh"
              }
            }
          },
          "setup": {
            "files": {
              "/etc/cfn/Jenkins.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "JENKINS_HOME_PATH=",
                      { "Ref": "AppVolumeMountPath" },
                      "\n",
                      "JENKINS_BACKUP_BUCKET=",
                      { "Ref": "BackupBucket" },
                      "\n",
                      "JENKINS_BACKUP_FOLDER=",
                      { "Ref": "BackupFolder" },
                      "\n",
                      "JENKINS_APPINSTALL_SCRIPT=",
                      { "Ref": "JenkinsAppinstallScriptUrl" },
                      "\n",
                      "JENKINS_OSPREP_SCRIPT=",
                      { "Ref": "JenkinsOsPrepScriptUrl" },
                      "\n",
                      "JENKINS_CFN_ENDPOINT=",
                      { "Ref": "CfnEndpointUrl" },
                      "\n",
                      "JENKINS_YUM_URL=",
                      { "Ref": "JenkinsRepoURL" },
                      "\n",
                      "JENKINS_YUM_URL=",
                      { "Ref": "JenkinsRepoKeyURL" },
                      "\n",
                      "JENKINS_EPEL_REPO=",
                      { "Ref": "EpelRepo" },
                      "\n",
                      "JENKINS_RPM_NAME=",
                      { "Ref": "JenkinsRpmName" },
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.JenkinsMaster.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsMaster",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/yum.repos.d/jenkins.repo": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[jenkins]\n",
                      "gpgkey = ",
                      { "Ref": "JenkinsRepoKeyURL" },
                      "\n",
                      "enabled = 1\n",
                      "baseurl = ",
                      { "Ref": "JenkinsRepoURL" },
                      "\n",
                      "name = Jenkins CI service-repository\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000444",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "files": {
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PipIndexFips" },
                      "\n",
                      "pip install --index-url=\"$PYPI_URL\" wheel==0.29.0\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade pip setuptools boto3 watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::Join": [
                "",
                [
                  "/dev/",
                  {
                    "Fn::FindInMap": [
                      "Distro2RootDevice",
                      { "Ref": "AmiDistro" },
                      "DeviceName"
                    ]
                  }
                ]
              ]
            },
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": { "Ref": "AppVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPairName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": { "Ref": "SecurityGroupIds" },
            "SubnetId": { "Ref": "SubnetIds" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                     { "Ref": "ProvisionUser" },
                     "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "\n",
                          "bootcmd:\n",
                          "  - cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          { "Ref": "AppVolumeDevice" },
                          "\n",
                          "mounts:\n",
                          "  - [ ",
                          { "Ref": "AppVolumeDevice" },
                          ", ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "hostname: ",
                { "Ref": "ServerHostname" },
                "\n",
                "fqdn: ",
                { "Ref": "ServerHostname" },
                ".",
                { "Ref": "DnsSuffix" },
                "\n",
                "\n",
                "runcmd:\n",
                "  - |\n",
                "      # Export cert bundle ENVs\n",
                "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      \n",
                "      # Helper function\n",
                "      function error_exit {\n",
                "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                          { "Ref": "AWS::StackName" },
                          " --resource JenkinsMaster\n",
                "         exit 1\n",
                "      }\n",
                "      \n",
                "      # Install missing RPMs\n",
                "      yum --enablerepo=",
                       { "Ref": "EpelRepo" },
                       " install -y ",
                       { "Ref": "PyStache" },
                       " ",
                       { "Ref": "PipRpm" },
                       " || error_exit 'Could not change install dependent",
                       " RPMs.'\n",
                "      \n",
                "      # Upgrade pip and setuptools\n",
                "      PYPI_URL=",
                       { "Ref": "PipIndexFips" },
                       "\n",
                "      pip install --index-url=\"$PYPI_URL\"",
                       " --upgrade pip setuptools\n\n",
                "      # Update cfn-bootstrapper hash method\n",
                "      printf 'Updating CFn hash-check method... '\n",
                "      PYVERS=$(python -c 'import sys;",
                       " version=sys.version_info[:2];",
                       " print(\"{0}.{1}\".format(*version))')\n",
                "      sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                       " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                       "/util.py && echo 'Success' || ",
                       "err_exit 'Failed updating CFn hash-method'\n",
                "      \n",
                "      # Initialize the CFn subsystems\n",
                "      /opt/aws/bin/cfn-init -v -c launch",
                       " --stack ",
                       { "Ref": "AWS::StackName" },
                       " --resource JenkinsMaster",
                       {
                         "Fn::If": [
                           "UseCfnUrl",
                           {
                             "Fn::Join": [
                               "",
                               [
                                 " --url ",
                                 { "Ref": "CfnEndpointUrl" }
                               ]
                             ]
                           },
                           ""
                         ]
                       },
                       " --region ",
                       { "Ref": "AWS::Region" },
                       " ||",
                       " ( echo 'ERROR: cfn-init failed! Aborting!';",
                       " /opt/aws/bin/cfn-signal -e 1",
                       "  --stack ",
                       { "Ref": "AWS::StackName" },
                       "  --resource JenkinsMaster",
                       {
                         "Fn::If": [
                           "UseCfnUrl",
                           {
                             "Fn::Join": [
                               "",
                               [
                                 " --url ",
                                 { "Ref": "CfnEndpointUrl" }
                               ]
                             ]
                           },
                           ""
                         ]
                       },
                       "  --region ",
                       { "Ref": "AWS::Region" },
                       ";",
                       " exit 1",
                       " )\n\n",
                ""
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
