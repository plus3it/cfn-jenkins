{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRole" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "AssignStaticPrivateIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "PrivateIp" }, "" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "" ] }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoUpdates" }, "true" ] }
      ]
    },
    "NotGenFive": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "c5"
              ]
            },
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "m5"
              ]
            }
          ]
        }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] }
      ]
    },
    "UseChainScript": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "ChainScriptUrl" }, "" ] }
      ]
    },
    "UseKeyPair": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "KeyPairName" }, "" ] }
      ]
    },
    "UseRepoKey": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "GitRepoKeyUrl" }, "" ] }
      ]
    }
  },
  "Description": "This template deploys a Linux instance to host the Jenkins slave-agent.",
  "Mappings": {
    "InstanceTypeCapabilities": {
      "IsGenFive": {
        "ExternDeviceName": "/dev/xvdf",
        "InternDeviceName": "/dev/nvme1n1"
      },
      "PreGenFive": {
        "ExternDeviceName": "/dev/xvdf",
        "InternDeviceName": "/dev/xvdf"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "InstanceRole",
            "Hostname",
            "Domainname",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "SecurityGroupIds",
            "SubnetId",
            "PrivateIp",
            "NoPublicIp",
            "NoReboot",
            "NoUpdates"
          ]
        },
        {
          "Label": {
            "default": "Jenkins EBS Volume (Optional)"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Service-setup"
          },
          "Parameters": [
            "JenkinsMaster",
            "JenkinsAgentName",
            "AgentAuthToken",
            "NpmSetupUri"
          ]
        },
        {
          "Label": {
            "default": "Miscellaneous"
          },
          "Parameters": [
            "CfnEndpointUrl",
            "EpelRepo",
            "PyStache",
            "PipRpm",
            "PypiIndexUrl"
          ]
        }
      ]
    }
  },
  "Outputs": {
    "JenkinsInstanceId": {
      "Description": "Instance ID",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-InstanceId" }
      },
      "Value": { "Ref": "JenkinsAgent" }
    }
  },
  "Parameters": {
    "AdminPubkeyURL":{
      "Description": "URL the file containing the admin group's SSH public keys.",
      "Type": "String",
      "AllowedPattern": "^$|^http://.*$|^https://.*$"
    },
    "AgentAuthToken": {
      "Description": "Authentication token-string used for JNLP config.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Whether to mount an extra EBS volume. Leave as default (\"false\") to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/var/jenkins",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "20",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "10",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com",
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "ChainScriptUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$|s3://.*$",
      "Default": "",
      "Description": "(Optional) URL to a \"chain\" script - a script to install add-ons not part of the core agent install.",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Jenkins's hostname and DNS record",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "GitRepoKeyUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$|s3://.*$",
      "Default": "",
      "Description": "(Optional) If hosting the chain-script (or its sub-scripts) in an authenticated git-repos, provide the URL of the git repository-key",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Description": "Node-name for Jenkins's hostname and DNS record",
      "Type": "String"
    },
    "InstanceRole": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge"
      ],
      "Default": "t2.small",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "JenkinsAgentName": {
      "Description": "Name assigned to this Jenkins build-executor.",
      "Type": "String"
    },
    "JenkinsMaster": {
      "Description": "FQDN of Jenkins master node",
      "Type": "String"
    },
    "JenkinsUserScriptUrl": {
      "Description": "URL of Jenkins Agent setup script",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Name of default SSH key to inject into default user account (Optional: mostly redundant when \"AdminPubkeyURL\"is specified)",
      "Type": "String"
    },
    "NpmSetupUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://rpm.nodesource.com/setup_8.x",
      "Description": "URL of NPM setup script.",
      "Type": "String"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "PrivateIp": {
      "Default": "",
      "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "jenkagent",
      "Description": "Default login user account name (do not use \"jenkins\").",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetId": {
      "Description": "ID of the subnet to assign to the instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "ZapAgentUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of OWASP ZAP archive-file.",
      "Type": "String"
    }
  },
  "Resources": {
    "JenkinsAgent": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "files": {
              "/tmp/adminkeys.pub": {
                "source": { "Ref": "AdminPubkeyURL" },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/tmp/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /tmp/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
	    },
            "commands": {
              "10-admkey-install": {
                "command": "bash -xe /tmp/admkey.sh"
              }
            }
          },
          "chain-script": {
            "commands": {
              "1-run-chain-script": {
                "command": "bash -e /etc/cfn/scripts/chain-script"
              }
            },
            "files": {
              "/etc/cfn/scripts/chain-script": {
                "source": { "Ref": "ChainScriptUrl" },
                "group": "root",
                "mode": "000750",
                "owner": "root"
              }
            }
          },
          "configSets": {
            "default": [
              "config",
              "admkey-install",
              {
                "Fn::If": [
                  "UseRepoKey",
                  "ssh-client-prep",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "watchmaker-install",
              "yum-addons",
              "install-jenkins-agent",
              "systemd-jenkins-agent",
              {
                "Fn::If": [
                  "UseChainScript",
                  "chain-script",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize"
            ]
          },
          "config": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.JenkinsAgent.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsAgent",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PypiIndexUrl" },
                      "\n",
                      "PYPI_HOST=$(echo $PYPI_URL |sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\")\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --trusted-host=\"$PYPI_HOST\"",
                      " --allow-all-external",
                      " --upgrade pip setuptools watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/JenkinsAgent.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "JENKINS_WORKDIR=",
                      { "Ref": "AppVolumeMountPath" },
                      "\n",
                      "JENKINS_MASTER=",
                      { "Ref": "JenkinsMaster" },
                      "\n",
                      "JENKINS_AUTH_TOKEN=",
                      { "Ref": "AgentAuthToken" },
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000444",
                "owner": "root"
              },
              "/tmp/ZAP_Linux.tar.gz": {
                "source": { "Ref": "ZapAgentUrl" },
                "group": "root",
                "mode": "000444",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsAgent",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "install-jenkins-agent": {
            "users" : {
              "jenkins" : {
                "homeDir" : "/var/jenkins"
              }
            },
            "files": {
              "/tmp/user_script.sh": {
                "source": { "Ref": "JenkinsUserScriptUrl" } ,
                "group": "root",
                "mode": "000755",
                "owner": "root"
              }
            },
            "commands": {
              "1-jenkins-home-perm": {
                "command": "chown -R jenkins:jenkins /var/jenkins"
              },
              "2-agent-install": {
                "command": "sudo -H -u jenkins bash -xe /tmp/user_script.sh"
              } 
            }
          },
          "ssh-client-prep": {
            "files": {
              "/root/.ssh/id_rsa": {
                "source": { "Ref": "GitRepoKeyUrl" },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/root/.ssh/config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "Host *\n",
                      "CheckHostIP false\n",
                      "UserKnownHostsFile /dev/null\n",
                      "StrictHostKeyChecking no\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              }
            }
          },
          "systemd-jenkins-agent":{
            "files": {
              "/etc/systemd/system/jenkins-agent.service": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[Unit]\n",
                      "Description=Jenkins Agent Daemon\n",
                      "Wants=network-online.target\n",
                      "Requires=network.target\n",
                      "\n",
                      "[Service]\n",
                      "ExecStartPre=/bin/sleep 15\n",
                      "ExecStart=/bin/java -jar ",
                      { "Ref": "AppVolumeMountPath" },
                      "/agent.jar -jnlpUrl https://",
                      { "Ref": "JenkinsMaster" },
                      "/computer/",
                      { "Ref": "JenkinsAgentName" },
                      "/slave-agent.jnlp -secret ",
                      { "Ref": "AgentAuthToken" },
                      " -workDir \"",
                      { "Ref": "AppVolumeMountPath" },
                      "\"\n",
                      "User=jenkins\n",
                      "Restart=always\n",
                      "RestartSec=15\n",
                      "\n",
                      "[Install]\n",
                      "WantedBy=multi-user.target\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              }
            },
            "commands": {
              "1-systemd-reload": {
                "command": "systemctl daemon-reload"
              },
              "2-systemd-agent-start": {
                "command": "systemctl start jenkins-agent.service"
              },
              "3-systemd-agent-enable": {
                "command": "systemctl enable jenkins-agent.service"
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          },
          "yum-addons": {
            "commands": {
              "1-yum-npm_repo": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl -sL ",
                      { "Ref": "NpmSetupUri" },
                      " | bash -\n"
                    ]
                  ]
                }
              },
              "2-yum-packages": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "yum --enablerepo=epel install -y @development",
                      "anaconda",
                      "ansible",
                      "fpm2",
                      "groovy",
                      "maven",
                      "python-nose",
                      "python-nose2",
                      "ruby",
                      "ubygems-devel",
                      "ruby-devel",
                      "nodejs\n"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeSize": "20",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": {
                  "Fn::If": [
                    "NotGenFive",
                    {
                      "Fn::FindInMap": [
                         "InstanceTypeCapabilities",
                         "PreGenFive",
                         "ExternDeviceName"
                      ]
                    },
                    {
                      "Fn::FindInMap": [
                        "InstanceTypeCapabilities",
                        "IsGenFive",
                        "ExternDeviceName"
                      ]
                    }
                  ]
                },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": {
          "Fn::If": [
            "UseKeyPair",
            { "Ref": "KeyPairName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "GroupSet": { "Ref": "SecurityGroupIds" },
            "SubnetId": { "Ref": "SubnetId" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "users:\n",
                "  - default\n",
                "\n",
                "hostname: ",
                { "Ref": "Hostname" },
                "\n",
                "fqdn: ",
                { "Ref": "Hostname" },
                ".",
                { "Ref": "Domainname" },
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "- cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          {
                            "Fn::If": [
                              "NotGenFive",
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "PreGenFive",
                                  "InternDeviceName"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "IsGenFive",
                                  "InternDeviceName"
                                ]
                              }
                            ]
                          },
                          "\n",
                          "mounts:\n",
                          "- [ ",
                          {
                            "Fn::If": [
                              "NotGenFive",
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "PreGenFive",
                                  "InternDeviceName"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "IsGenFive",
                                  "InternDeviceName"
                                ]
                              }
                            ]
                          },
                          ", ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "runcmd:\n",
                "  - |\n",
                "      # Export cert bundle ENVs\n",
                "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "      \n",
                "      # Define our error-handler\n",
                "      function err_exit {\n",
                "         echo \"${1}\"\n",
                "         logger -p kern.crit -t UserData \"${1}\"\n",
                "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                            { "Ref": "AWS::StackName" },
                          " --resource JenkinsAgent\n",
                "         exit 1\n",
                "      }\n",
                "      \n",
                "      # Install RPMs needed by the cfn-tools.\n",
                "      yum --enablerepo=",
                       { "Ref": "EpelRepo" },
                       " install -y ",
                       { "Ref": "PyStache" },
                       " ",
                       { "Ref": "PipRpm" },
                       " || err_exit 'Could not install Cfn dependencies.'\n",
                "      \n",
                "      # Update cfn-bootstrapper hash method\n",
                "      PYVERS=$(python -c 'import sys;",
                       " version=sys.version_info[:2];",
                       " print(\"{0}.{1}\".format(*version))')\n",
                "      sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                       " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                        "/util.py\n",
                "      \n",
                "      # Initialize the Cfn subsystems\n",
                "      /opt/aws/bin/cfn-init -v -c default",
                       " --stack ",
                       { "Ref": "AWS::StackName" },
                       " --resource JenkinsAgent ",
                       " --region ",
                       { "Ref": "AWS::Region" },
                       " && echo 'Successfully ran cfn-init'",
                       " || err_exit 'Failed to run cfn-init' > /dev/stderr\n",
                "      \n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
