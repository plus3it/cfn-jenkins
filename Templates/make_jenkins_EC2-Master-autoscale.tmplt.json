{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRoleProfile" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "true" ]
    },
    "InstallCloudWatchAgent": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CloudWatchAgentUrl" }, "" ] }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoUpdates" }, "true" ] }
      ]
    },
    "NotGenFive": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "c5"
              ]
            },
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "m5"
              ]
            },
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "t3"
              ]
            }
          ]
        }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseAdminGroups": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminGroups" }, "" ] }
      ]
    },
    "UseAdminPubkeyURL": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AdminPubkeyURL" }, "" ] }
      ]
    },
    "UseAdminUsers": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminUsers" }, "" ] }
      ]
    },
    "UseCfnAppInstaller": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "JenkinsAppinstallScriptUrl" }, "" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] }
      ]
    },
    "UseElbHealthCheck": {
      "Fn::Or": [
        { "Condition": "UseLoadBalancerNames" },
        { "Condition": "UseTargetGroupArns" }
      ]
    },
    "UseComputerName": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerComputerName" }, "" ] }
      ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseKeyPair": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "KeyPairName" }, "" ] }
      ]
    },
    "UseLoadBalancerNames": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Join": [
                "",
                { "Ref": "LoadBalancerNames" }
              ]
            },
            ""
          ]
        }
      ]
    },
    "UseOsPrepScript": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "JenkinsOsPrepScriptUrl" }, "" ] }
      ]
    },
    "UseOuPath": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerOuPath" }, "" ] }
      ]
    },
    "UseScheduledAction": {
      "Fn::And": [
        {
          "Fn::Not": [
            { "Fn::Equals": [ { "Ref": "ScaleUpSchedule" }, "" ] }
          ]
        },
        {
          "Fn::Not": [
            { "Fn::Equals": [ { "Ref": "ScaleDownSchedule" }, "" ] }
          ]
        }
      ]
    },
    "UseTargetGroupArns": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Join": [
                "",
                { "Ref": "TargetGroupArns" }
              ]
            },
            ""
          ]
        }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template deploys ASG-managed, STIG-hardened Linux instances to host the Jenkins service's master node",
  "Mappings": {
    "InstanceTypeCapabilities": {
      "IsGenFive": {
        "ExternDeviceName": "/dev/xvdf",
        "InternDeviceName": "/dev/nvme1n1"
      },
      "PreGenFive": {
        "ExternDeviceName": "/dev/xvdf",
        "InternDeviceName": "/dev/xvdf"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "RootVolumeSize",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "InstanceRoleName",
            "InstanceRoleProfile",
            "SubnetIds",
            "NoPublicIp",
            "NoReboot",
            "NoUpdates",
            "SecurityGroupIds"
          ]
        },
        {
          "Label": {
            "default": "Jenkins EBS Volume"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Jenkins Application Configuration"
          },
          "Parameters": [
            "JenkinsOsPrepScriptUrl",
            "JenkinsAppinstallScriptUrl",
            "JenkinsRpmName",
            "EpelRepo",
            "JenkinsRepoURL",
            "JenkinsRepoKeyURL",
            "BackupBucket",
            "BackupFolder"
          ]
        },
        {
          "Label": {
            "default": "EC2 Watchmaker Configuration"
          },
          "Parameters": [
            "PypiIndexUrl",
            "WatchmakerConfig",
            "WatchmakerEnvironment",
            "WatchmakerComputerName",
            "WatchmakerOuPath",
            "WatchmakerAdminGroups",
            "WatchmakerAdminUsers"
          ]
        },
        {
          "Label": {
            "default": "AutoScale Configuration"
          },
          "Parameters": [
            "DesiredCapacity",
            "MinCapacity",
            "MaxCapacity",
            "ScaleDownSchedule",
            "ScaleUpSchedule",
            "TargetGroupArns",
            "LoadBalancerNames"
          ]
        },
        {
          "Label": {
            "default": "CloudFormation Configuration"
          },
          "Parameters": [
            "CfnEndpointUrl",
            "CfnGetPipUrl",
            "CfnBootstrapUtilsUrl",
            "CloudWatchAgentUrl",
            "ToggleCfnInitUpdate",
            "ToggleNewInstances"
          ]
        }
      ],
      "ParameterLabels": {
        "ToggleCfnInitUpdate": {
          "default": "Force Cfn Init Update"
        },
        "ToggleNewInstances": {
          "default": "Force New Instances"
        }
      }
    },
    "Version": "1.5.4"
  },
  "Outputs": {
    "ScaleDownScheduledAction": {
      "Condition": "UseScheduledAction",
      "Description": "Scale Down Scheduled Action ID",
      "Value": { "Ref": "ScaleDownScheduledAction" }
    },
    "ScaleUpScheduledAction": {
      "Condition": "UseScheduledAction",
      "Description": "Scale Up Scheduled Action ID",
      "Value": { "Ref": "ScaleUpScheduledAction" }
    },
    "JenkinsMasterASGId": {
      "Description": "Autoscaling Group ID",
      "Value": { "Ref": "JenkinsMasterASG" }
    },
    "JenkinsMasterLCId": {
      "Description": "Launch Configuration ID",
      "Value": { "Ref": "JenkinsMasterLC" }
    },
    "JenkinsMasterLCLogGroupName": {
      "Condition": "InstallCloudWatchAgent",
      "Description": "Log Group Name",
      "Value": { "Ref": "JenkinsMasterLCLogGroup" }
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^http[s]?://.*|^$",
      "Description": "(Optional) URL of file containing admin group's SSH public-keys",
      "Type": "String"
    },
    "AmiId": {
      "Description": "ID of the AMI to launch",
      "Type": "AWS::EC2::Image::Id"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Decision whether to mount an extra EBS volume. Leave as default (\"false\") to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/var/lib/jenkins",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "20",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "BackupBucket": {
      "AllowedPattern": "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]*$|^$",
      "Description": "S3 Bucket to host backups of Jenkins config-data",
      "Type": "String"
    },
    "BackupFolder": {
      "AllowedPattern": "^[a-zA-Z]*[a-z0-9-]*[a-zA-Z]*$",
      "Description": "Folder in S3 Bucket to host backups of Jenkins config-data",
      "Type": "String"
    },
    "CfnBootstrapUtilsUrl": {
      "AllowedPattern": "^http[s]?://.*\\.tar\\.gz$",
      "Default": "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
      "Description": "URL to aws-cfn-bootstrap-latest.tar.gz",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com",
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "CfnGetPipUrl": {
      "AllowedPattern": "^http[s]?://.*\\.py$",
      "Default": "https://bootstrap.pypa.io/2.6/get-pip.py",
      "Description": "URL to get-pip.py",
      "Type": "String"
    },
    "CloudWatchAgentUrl": {
      "AllowedPattern": "^$|^s3://.*$",
      "Default": "",
      "Description": "(Optional) S3 URL to CloudWatch Agent installer. Example: s3://amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip",
      "Type": "String"
    },
    "DesiredCapacity": {
      "Default": "1",
      "Description": "Desired number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "InstanceRoleName": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance",
      "Type": "String"
    },
    "InstanceRoleProfile": {
      "Default": "",
      "Description": "(Optional) IAM instance-role profile to apply to the instance(s)",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.4xlarge",
        "c4.2xlarge"
      ],
      "Default": "t2.xlarge",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "JenkinsAppinstallScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of Jenkins application-installer script (Must be anonymously fetchable or embed authenticated-fetch information).",
      "Type": "String"
    },
    "JenkinsOsPrepScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of OS-preparation script (Must be anonymously fetchable or embed authenticated-fetch information).",
      "Type": "String"
    },
    "JenkinsRepoKeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pkg.jenkins.io/redhat-stable/jenkins.io.key",
      "Description": "URL to the Jenkins yum-repository GPG key",
      "Type": "String"
    },
    "JenkinsRepoURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "http://pkg.jenkins.io/redhat-stable",
      "Description": "URL to the Jenkins yum-repository",
      "Type": "String"
    },
    "JenkinsRpmName": {
      "Description": "Name of Jenkins RPM to install. Include release version if 'other-than-latest' is desired. Example values would be: jenkins, jenkins-2.*, jenkins-X.Y.Z, etc.",
      "Type": "String",
      "AllowedPattern": "^jenkins.*$"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "String"
    },
    "LoadBalancerNames": {
      "Default": "",
      "Description": "Comma-separated string of Classic ELB Names to associate with the Autoscaling Group; conflicts with TargetGroupArns",
      "Type": "CommaDelimitedList"
    },
    "MaxCapacity": {
      "Default": "2",
      "Description": "Maximum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "MinCapacity": {
      "Default": "1",
      "Description": "Minimum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9-]{6,12}",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "ec2-user",
      "Description": "Name for remote-administration account",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "RootVolumeSize": {
      "ConstraintDescription": "Must be between 20GB and 16384GB.",
      "Default": "20",
      "Description": "Size in GB of the EBS volume to create. If smaller than AMI defaul, create operation will fail; If larger, root device-volume's partition size will be increased",
      "MaxValue": "16384",
      "MinValue": "20",
      "Type": "Number"
    },
    "ScaleDownSchedule": {
      "Default": "",
      "Description": "(Optional) Scheduled Action in cron-format (UTC) to scale down to MinCapacity; ignored if empty or ScaleUpSchedule is unset (E.g. \"0 0 * * *\")",
      "Type": "String"
    },
    "ScaleUpSchedule": {
      "Default": "",
      "Description": "(Optional) Scheduled Action in cron-format (UTC) to scale up to MaxCapacity; ignored if empty or ScaleDownSchedule is unset (E.g. \"0 10 * * Mon-Fri\")",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetIds": {
      "Description": "List of subnets to associate to the Autoscaling Group",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "TargetGroupArns": {
      "Default": "",
      "Description": "Comma-separated string of Target Group ARNs to associate with the Autoscaling Group; conflicts with LoadBalancerNames",
      "Type": "CommaDelimitedList"
    },
    "ToggleCfnInitUpdate": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance metadata, triggering the cfn-init update sequence",
      "Type": "String"
    },
    "ToggleNewInstances": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance userdata, triggering new instances via the Autoscale update policy",
      "Type": "String"
    },
    "WatchmakerAdminGroups": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain groups that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerAdminUsers": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain users that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerComputerName": {
      "Default": "",
      "Description": "(Optional) Sets the hostname/computername within the OS",
      "Type": "String"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^(http[s]?|s3|file)://.*$",
      "Default": "",
      "Description": "(Optional) Path to a Watchmaker config file.  The config file path can be a remote source (i.e. http[s]://, s3://) or local directory (i.e. file://)",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    },
    "WatchmakerOuPath": {
      "AllowedPattern": "^$|^(OU=.+,)+(DC=.+)+$",
      "Default": "",
      "Description": "(Optional) DN of the OU to place the instance when joining a domain. If blank and \"WatchmakerEnvironment\" enforces a domain join, the instance will be placed in a default container. Leave blank if not joining a domain, or if \"WatchmakerEnvironment\" is \"false\"",
      "Type": "String"
    }
  },
  "Resources": {
    "ScaleDownScheduledAction": {
      "Condition": "UseScheduledAction",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "JenkinsMasterASG" },
        "DesiredCapacity": { "Ref": "MinCapacity" },
        "Recurrence": { "Ref": "ScaleDownSchedule" }
      },
      "Type": "AWS::AutoScaling::ScheduledAction"
    },
    "ScaleUpScheduledAction": {
      "Condition": "UseScheduledAction",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "JenkinsMasterASG" },
        "DesiredCapacity": { "Ref": "MaxCapacity" },
        "Recurrence": { "Ref": "ScaleUpSchedule" }
      },
      "Type": "AWS::AutoScaling::ScheduledAction"
    },
    "JenkinsMasterASG": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "DesiredCapacity" },
          "Timeout": "PT30M"
        }
      },
      "Properties": {
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "HealthCheckGracePeriod": {
          "Fn::If": [
            "UseElbHealthCheck",
            3600,
            { "Ref": "AWS::NoValue" }
          ]
        },
        "HealthCheckType": {
          "Fn::If": [
            "UseElbHealthCheck",
            "ELB",
            "EC2"
          ]
        },
        "LaunchConfigurationName": { "Ref": "JenkinsMasterLC" },
        "LoadBalancerNames": {
          "Fn::If": [
            "UseLoadBalancerNames",
            { "Ref": "LoadBalancerNames" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "MaxSize": { "Ref": "MaxCapacity" },
        "MinSize": { "Ref": "MinCapacity" },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "TargetGroupARNs": {
          "Fn::If": [
            "UseTargetGroupArns",
            { "Ref": "TargetGroupArns" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "VPCZoneIdentifier": { "Ref": "SubnetIds" }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": "true"
        }
      }
    },
    "JenkinsMasterLC": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "commands": {
              "1-install-keyfile": {
                "command": "bash -xe /etc/cfn/scripts/admkey.sh"
              }
            },
            "files": {
              "/etc/cfn/files/AdminKeys.pub": {
                "source": { "Ref": "AdminPubkeyURL" },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/etc/cfn/scripts/admkey.sh": {
              "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /etc/cfn/files/AdminKeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "app-install": {
            "files": {
              "/etc/cfn/scripts/appinstall.sh": {
                "source": { "Ref": "JenkinsAppinstallScriptUrl" },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/backups.cron": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "# Daily backup of JENKINS_HOME to S3\n",
                      "0 23 * * * jenkins tar cf - ",
                        { "Ref": "AppVolumeMountPath" },
                        " | aws s3 cp - ",
                        { "Ref": "BackupBucket" },
                        "/Backups/daily/$(date '+\\%A').tar\n",
                      "# Sync JENKINS_HOME to S3 for re-deployments\n",
                      "*/20 * * * * jenkins tar cf - ",
                        { "Ref": "AppVolumeMountPath" },
                        " | aws s3 cp - s3://",
                        { "Ref": "BackupBucket" },
                        "/Backups/sync/JENKINS_HOME-$(date '+\\%M').tar\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-appinstall-script": {
                "command": "bash -xe /etc/cfn/scripts/appinstall.sh"
              },
              "2-install-backups_cron": {
                "command": "install -b -m 000644 -o root -g root /etc/cfn/scripts/backups.cron /etc/cron.d/JenkinsMaster-backups"
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              {
                "Fn::If": [
                  "InstallCloudWatchAgent",
                  "cw-agent-install",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "watchmaker-install",
              {
                "Fn::If": [
                  "UseOsPrepScript",
                  "osprep",
                  { "Ref" : "AWS::NoValue" }
                ]
              },
              "watchmaker-launch",
              {
                "Fn::If": [
                  "UseCfnAppInstaller",
                  "app-install",
                  { "Ref" : "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ],
            "update": [
              "setup",
              {
                "Fn::If": [
                  "InstallUpdates",
                  "install-updates",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "watchmaker-install",
              {
                "Fn::If": [
                  "UseOsPrepScript",
                  "osprep",
                  { "Ref" : "AWS::NoValue" }
                ]
              },
              "watchmaker-update",
              {
                "Fn::If": [
                  "UseCfnAppInstaller",
                  "app-install",
                  { "Ref" : "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ]
          },
          "cw-agent-install": {
            "commands": {
              "01-get-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "install -Dbm 700 -o root -g root /dev/null /etc/cfn/scripts/AmazonCloudWatchAgent.zip &&",
                      " aws s3 cp ",
                      { "Ref": "CloudWatchAgentUrl" },
                      " /etc/cfn/scripts/AmazonCloudWatchAgent.zip"
                    ]
                  ]
                }
              },
              "02-extract-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum -y install unzip &&",
                      "unzip /etc/cfn/scripts/AmazonCloudWatchAgent.zip -d /etc/cfn/scripts/aws-cw-agent"
                    ]
                  ]
                }
              },
              "10-install-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      " bash -xe install.sh &&",
                      " /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl",
                      " -a fetch-config -m ec2 -c",
                      " file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s"
                    ]
                  ]
                },
                "cwd": "/etc/cfn/scripts/aws-cw-agent"
              }
            },
            "files": {
              "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{",
                      "  \"logs\": {\n",
                      "    \"logs_collected\": {\n",
                      "      \"files\": {\n",
                      "        \"collect_list\": [\n",
                      "          {\n",
                      "            \"file_path\": \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "JenkinsMasterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"cloudwatch_agent_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/cfn-init.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "JenkinsMasterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"cfn_init_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/messages\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "JenkinsMasterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"messages_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/watchmaker/watchmaker.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "JenkinsMasterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"watchmaker_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/watchmaker/salt_call.debug.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "JenkinsMasterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"salt_call_debug_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " }\n",
                      "        ]\n",
                      " }\n",
                      " },\n",
                      "    \"log_stream_name\": \"default_logs_{instance_id}\"\n",
                      " }\n",
                      "}\n"
                    ]
                  ]
                }
              }
            }
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsMasterASG",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "install-updates": {
            "commands": {
              "10-install-updates": {
                "command": "yum -y update"
              }
            }
          },
          "osprep": {
            "files": {
              "/etc/cfn/scripts/osprep.sh": {
                "source": { "Ref": "JenkinsOsPrepScriptUrl" },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-osprep-script": {
                "command": "bash -xe /etc/cfn/scripts/osprep.sh"
              },
              "2-packages-from-epel": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum --enablerepo=",
                        { "Ref": "EpelRepo" },
                        " install -y",
                        " git",
                        "\n"
                    ]
                  ]
                }
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "shutdown -r +1 &"
              }
            }
          },
          "setup": {
            "files": {
              "/etc/cfn/Jenkins.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "JENKINS_APPINSTALL_SCRIPT=",
                        { "Ref": "JenkinsAppinstallScriptUrl" },
                        "\n",
                      "JENKINS_BACKUP_BUCKET=",
                        { "Ref": "BackupBucket" },
                        "\n",
                      "JENKINS_BACKUP_FOLDER=",
                        { "Ref": "BackupFolder" },
                        "\n",
                      "JENKINS_CFN_ENDPOINT=",
                        { "Ref": "CfnEndpointUrl" },
                        "\n",
                      "JENKINS_EPEL_REPO=",
                        { "Ref": "EpelRepo" },
                        "\n",
                      "JENKINS_HOME_PATH=",
                        { "Ref": "AppVolumeMountPath" },
                        "\n",
                      "JENKINS_OSPREP_SCRIPT=",
                        { "Ref": "JenkinsOsPrepScriptUrl" },
                        "\n",
                      "JENKINS_RPM_NAME=",
                        { "Ref": "JenkinsRpmName" },
                        "\n",
                      "JENKINS_YUM_URL=",
                        { "Ref": "JenkinsRepoURL" },
                        "\n",
                      "JENKINS_YUMKEY_URL=",
                        { "Ref": "JenkinsRepoKeyURL" },
                        "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceRoleName" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.JenkinsMasterLC.Metadata\n",
                      "action=cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsMasterLC",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/yum.repos.d/jenkins.repo": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[jenkins]\n",
                      "gpgkey = ",
                      { "Ref": "JenkinsRepoKeyURL" },
                      "\n",
                      "enabled = 1\n",
                      "baseurl = ",
                      { "Ref": "JenkinsRepoURL" },
                      "\n",
                      "name = Jenkins CI service-repository\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000444",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PypiIndexUrl" },
                      "\n",
                      "curl --silent --show-error --retry 5 -L ",
                      { "Ref": "CfnGetPipUrl" },
                      " | python - --index-url=\"$PYPI_URL\" 'wheel<0.30.0;python_version<\"2.7\"' 'wheel;python_version>=\"2.7\"'",
                      "\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade 'pip<10' 'setuptools<37;python_version<\"2.7\"' 'setuptools;python_version>=\"2.7\"' boto3\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --no-reboot",
                      " --exclude-states scap*scan",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \"",
                                { "Ref": "WatchmakerOuPath" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "watchmaker-update": {
            "commands": {
              "10-watchmaker-update": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --salt-states None",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \"",
                                { "Ref": "WatchmakerOuPath" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "ToggleCfnInitUpdate": { "Ref": "ToggleCfnInitUpdate" }
      },
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "AssignPublicIp",
            true,
            false
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": { "Ref": "RootVolumeSize" },
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": "/dev/xvdf",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRoleProfile" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": {
          "Fn::If": [
            "UseKeyPair",
            { "Ref": "KeyPairName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "SecurityGroups": { "Ref": "SecurityGroupIds" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"===============3585321300151562773==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud.cfg\"\n",
                "\n",
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                     { "Ref": "ProvisionUser" },
                     "\n",
                "\n",
                "hostname: ",
                { "Ref": "WatchmakerComputerName" },
                "\n",
                "\n",
                "growpart:\n",
                "  mode: auto\n",
                "  devices: [ '/dev/xvda', '/dev/xvda2', '/dev/nvme0n1p2' ]\n",
                "  ignore_growroot_disabled: false\n",
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "- cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          {
                            "Fn::If": [
                              "NotGenFive",
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "PreGenFive",
                                  "InternDeviceName"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "IsGenFive",
                                  "InternDeviceName"
                                ]
                              }
                            ]
                          },
                          "\n",
                          "mounts:\n",
                          "- [ ",
                          {
                            "Fn::If": [
                              "NotGenFive",
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "PreGenFive",
                                  "InternDeviceName"
                                ]
                              },
                              {
                                "Fn::FindInMap": [
                                  "InstanceTypeCapabilities",
                                  "IsGenFive",
                                  "InternDeviceName"
                                ]
                              }
                            ]
                          },
                          ", ",

                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"script.sh\"\n",
                "\n",
                "#!/bin/bash -xe\n\n",
                "# CFN LaunchConfig Update Toggle: ",
                { "Ref": "ToggleNewInstances" },
                "\n\n",
                "\n",
                "# Extend any available LVM PVs\n",
                "if [[ -x $( which pvs ) ]]\n",
                "then\n",
                "   LVMPVS=($(pvs --noheadings -o pv_name))\n",
                "   for PV in \"${LVMPVS[@]}\"\n",
                "   do\n",
                "      pvresize ${PV}\n",
                "   done\n",
                "\n",
                "   vgdisplay -s\n",
                "fi\n",
                "\n",
                "# Export AWS ENVs\n",
                "test -r /etc/aws/models/endpoints.json && export AWS_DATA_PATH=/etc/aws/models || true\n",
                "export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export AWS_DEFAULT_REGION=",
                { "Ref": "AWS::Region" },
                "\n\n",
                "# Add local hostname binding\n",
                "printf \"%s\\t%s %s\\n\" ",
                "\"$( ip addr show eth0 | sed -n '/eth0$/p' | sed -e 's/^ *inet *//' -e 's#/.*$##' )\" ",
                "\"$( hostname -f)\" \"$( hostname -s )\" >> /etc/hosts\n",
                "\n",
                "# Get pip\n",
                "PYPI_URL=",
                { "Ref": "PypiIndexUrl" },
                "\n",
                "curl --silent --show-error --retry 5 -L ",
                { "Ref": "CfnGetPipUrl" },
                " | python - --index-url=\"$PYPI_URL\" 'wheel<0.30.0;python_version<\"2.7\"' 'wheel;python_version>=\"2.7\"'",
                "\n\n",
                "# Update cfn-bootstrapper hash method\n",
                "PYVERS=$(python -c 'import sys;",
                " version=sys.version_info[:2];",
                " print(\"{0}.{1}\".format(*version))')\n",
                "sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                "/util.py\n",
                "\n",
                "# Add pip to path\n",
                "hash pip 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin\"",
                "\n\n",
                "# Upgrade pip and setuptools\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade 'pip<10' 'setuptools<37;python_version<\"2.7\"' 'setuptools;python_version>=\"2.7\"'",
                "\n\n",
                "# Fix python urllib3 warnings\n",
                "yum -y install gcc python-devel libffi-devel openssl-devel\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade 'pycparser<2.19;python_version<\"2.7\"' cffi\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade 'pycparser<2.19;python_version<\"2.7\"' 'cryptography<2.2;python_version<\"2.7\"' 'cryptography;python_version>=\"2.7\"'",
                "\n\n",
                "if [[ $(rpm --quiet -q aws-cfn-bootstrap || pip show --quiet aws-cfn-bootstrap)$? -ne 0 ]]\n",
                "then\n",
                "  # Get cfn utils\n",
                "  pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade --upgrade-strategy only-if-needed ",
                { "Ref": "CfnBootstrapUtilsUrl" },
                "\n\n",
                "  # Fixup cfn utils\n",
                "  INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat",
                " 2> /dev/null || echo /usr/init/redhat)\n",
                "  chmod 775 ${INITDIR}/cfn-hup\n",
                "  ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                "  chkconfig --add cfn-hup\n",
                "  chkconfig cfn-hup on\n",
                "  mkdir -p /opt/aws/bin\n",
                "  BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin",
                " 2> /dev/null || echo /usr/bin)\n",
                "  for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup",
                " cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                "  do\n",
                "  ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                "  echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                "  done\n\n",
                "fi\n\n",
                "# Remove gcc now that it is no longer needed\n",
                "yum -y remove gcc --setopt=clean_requirements_on_remove=1\n\n",
                "# Add cfn utils to path\n",
                "hash cfn-signal 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                "\n\n",
                "# Execute cfn-init\n",
                "cfn-init -v -c launch",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource JenkinsMasterLC",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRoleName" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                " ||",
                " ( echo 'ERROR: cfn-init failed! Aborting!';",
                " cfn-signal -e 1",
                "  --stack ",
                { "Ref": "AWS::StackName" },
                "  --resource JenkinsMasterASG",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRoleName" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "  --region ",
                { "Ref": "AWS::Region" },
                ";",
                " exit 1",
                " )\n\n",
                "--===============3585321300151562773==--"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "JenkinsMasterLCLogGroup": {
      "Condition": "InstallCloudWatchAgent",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/ec2/lx/",
              { "Ref": "AWS::StackName" }
            ]
          ]
        }
      },
      "Type": "AWS::Logs::LogGroup"
    }
  }
}
